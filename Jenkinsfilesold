pipeline {
  agent any 
  tools {
    maven 'Maven'
  }
  stages {
    stage ('Initializing Build') {
      steps {
        sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
            ''' 
      	     }
                          }
stage ('Check-Secrets') {
      steps {
	sh 'whoami'
	sh 'pwd'
        sh 'rm trufflehog || true'
        sh 'docker run gesellix/trufflehog --json https://github.com/jdpatilonline/Webdemo_devsecops.git > trufflehog'
        sh 'cat trufflehog'
      }
    }
 stage ('SCA-Source Composition Analysis') {
      steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/jdpatilonline/Webdemo_devsecops/master/owasp-dependency-check.sh" '
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /var/lib/jenkins/OWASP-Dependency-Check/reports/dependency-check-report.xml'
        
      }
    }
stage ('SAST') {
		steps {
		withSonarQubeEnv('sonar') {
			sh '#mvn sonar:sonar'
			sh '#cat target/sonar/report-task.txt'
		       			}
			}
		}

    stage ('Build Running') {
      steps {
	sh 'mvn clean package'
	     }       
		     }

	stage ('App Deploy-To-Tomcat') {
	            steps {
	                sh 'sudo scp -i /home/devsecops/.ssh/id_rsa -o StrictHostKeyChecking=no target/*.war devsecops-tomcat@192.168.5.157:/prod/apache-tomcat-8.5.39/webapps/webapp.war'
	                      
	                   }     
                                      }
	stage ('Nmap Port Scan') {
		    steps {
			sh 'rm nmap* || true'
			sh 'docker run --rm -v "$(pwd)":/data uzyexe/nmap -sS -sV -oX nmap 192.168.5.157'
			sh 'cat nmap'
		    }
	    }

	stage ('Nikto Scan') {
		    steps {
			sh 'rm nikto-output.xml || true'
			sh 'docker pull secfigo/nikto:latest'
			sh 'docker run --user $(id -u):$(id -g) --rm -v $(pwd):/report -i secfigo/nikto:latest -h 192.168.5.157 -p 8080 -output /report/nikto-output.xml'
			sh 'cat nikto-output.xml'   
		    }
	    }
	    
	    stage ('SSL Checks') {
		    steps {
			sh 'pip install sslyze==1.4.2'
			sh 'python -m sslyze --regular 192.168.5.157:8080 --json_out sslyze-output.json'
			sh 'cat sslyze-output.json'
		    }
	    }

     stage ('DAST') {
	steps {
		sh 'docker run -t zaproxy/zap-stable zap-baseline.py -t http://192.168.5.157:8080/webapp/ || true'
		     }
		}  	


        }

}
